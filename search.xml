<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Obsidian进阶插件Obsidian Leaflet用法之管理自己的旅行照片</title>
    <url>/2025/03/27/%E8%AE%A1%E7%AE%97%E6%9C%BA/hello-world/</url>
    <content><![CDATA[<h2 id="0-主要功能"><a href="#0-主要功能" class="headerlink" title="0 主要功能"></a>0 主要功能</h2><p>通过照片的GPS定位信息标记在地图上，鼠标放在标记点上可预览图片，标记点可绑定文件和图片，可以在里面写随想和照片，让相册里的照片跃然地图之上。</p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>自从使用nas备份自己的照片之后，成批的照片管理就成了问题，照片收集起来，一堆乱糟糟，不知从何看起，所以尝试了很多照片管理工具，有把一堆照片按时间分类整理的小软件，还有一些管理照片的软件例如digikam或PhotoPrism，他们功能都很强大，可以快速的管理图片。<br>这些照片管理软件有一个地图的功能让我感觉特别有意思，但使用起来都有点不尽如人意，例如PhotoPrism的地图功能需要收费，digikam的地图很模糊，观感不太好。<br>于是突然有一天我看到obsidian有个Obsidian Leaflet插件，了解一番之后觉得简直完美，下面我就简述一下这个插件的使用方法。</p>
<h2 id="2-基本使用方法"><a href="#2-基本使用方法" class="headerlink" title="2 基本使用方法"></a>2 基本使用方法</h2><h3 id="2-1-安装插件"><a href="#2-1-安装插件" class="headerlink" title="2.1 安装插件"></a>2.1 安装插件</h3><p>打开obsidian第三方插件商城，输入<code>Obsidian Leaflet</code>，安装</p>
<p>首先可以去github上看下这个插件的仓库：<a href="https://github.com/javalent/obsidian-leaflet">https://github.com/javalent/obsidian-leaflet</a></p>
<p>它给了一个案例和一个表</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```leaflet</span></span><br><span class="line"><span class="code">id: leaflet-map</span></span><br><span class="line"><span class="code">image: [[Image.jpg]]</span></span><br><span class="line"><span class="code">height: 500px</span></span><br><span class="line"><span class="code">lat: 50</span></span><br><span class="line"><span class="code">long: 50</span></span><br><span class="line"><span class="code">minZoom: 1</span></span><br><span class="line"><span class="code">maxZoom: 10</span></span><br><span class="line"><span class="code">defaultZoom: 5</span></span><br><span class="line"><span class="code">unit: meters</span></span><br><span class="line"><span class="code">scale: 1</span></span><br><span class="line"><span class="code">marker: default, 39.983334, -82.983330, [[Note]]</span></span><br><span class="line"><span class="code">darkMode: true</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>我们改为</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```leaflet</span></span><br><span class="line"><span class="code">id: TT20220521</span></span><br><span class="line"><span class="code">osmLayer: false</span></span><br><span class="line"><span class="code">tileServer: http://&#123;s&#125;.tile.osm.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</span></span><br><span class="line"><span class="code">tileSubdomains: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="code">lat: 30.2574</span></span><br><span class="line"><span class="code">long: 120.1429</span></span><br><span class="line"><span class="code">height: 800px</span></span><br><span class="line"><span class="code">width: 100%</span></span><br><span class="line"><span class="code">defaultZoom: 16</span></span><br><span class="line"><span class="code">maxzoom: 18</span></span><br><span class="line"><span class="code">minzoom: 1</span></span><br><span class="line"><span class="code">unit: meters</span></span><br><span class="line"><span class="code">scale: 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">markerFolder: 100_Schedule/130_计划清单/133_旅游计划/旅游记录/2022/2022年5月西湖一日游/标记点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>解释一下</p>
<ul>
<li><code>id</code>：用来识别这个块的id，写一个独一无二的就行，插件用这个id和标记点绑定</li>
<li><code>osmLayer: false</code>：我们这里使用真实地图，所以这里写<code>false</code></li>
<li><code>tileServer</code>：地图瓦片服务器地址，这里选择<code>openstreetmap</code>的源<code>http://&#123;s&#125;.tile.osm.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</code>，也可以选择高德的源，下面会说到</li>
<li><code>tileSubdomains</code>：这是申请数据要附带的，这里填<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>，不同的服务器不一样</li>
<li><code>lat</code>：地图打开时中心点的纬度</li>
<li><code>long</code>：地图打开时中心点的经度</li>
<li><code>height</code>：地图在obsidian页面高度，可以填像素值或者百分比，这里可以自由调整</li>
<li><code>width</code>: 地图在obsidian页面宽度，和上面一样</li>
<li><code>defaultZoom</code>：默认的一个缩放，这里插件原来的一个范围是<code>1-10</code>，导致地图不能放的很小，后面讲一下怎么把范围改大，这里默认填<code>16</code>，可以自己调整</li>
<li><code>maxzoom</code>：缩放最大限制</li>
<li><code>minzoom</code>：缩放最小限制</li>
<li><code>unit</code>：地图单位，这里填<code>meters</code></li>
<li><code>scale</code>：我也不知道是什么，照着填1就行了</li>
<li><code>markerFolder</code>: 标记点文件夹，可以暂时不填</li>
</ul>
<h3 id="2-2-添加想要的地图"><a href="#2-2-添加想要的地图" class="headerlink" title="2.2 添加想要的地图"></a>2.2 添加想要的地图</h3><h4 id="修改中心点经纬度"><a href="#修改中心点经纬度" class="headerlink" title="修改中心点经纬度"></a>修改中心点经纬度</h4><p>打开<a href="https://www.openstreetmap.org/#map">https://www.openstreetmap.org/#map</a></p>
<p>找到自己想要定位的点</p>
<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/508795410242007.png"></p>
<p>将上面的经纬度复制下来，前面是纬度，后面是经度，复制到上面的lat和long后面</p>
<h4 id="修改缩放限制"><a href="#修改缩放限制" class="headerlink" title="修改缩放限制"></a>修改缩放限制</h4><p>打开笔记文件夹目录底下的<code>.obsidian</code>文件夹，然后打开<code>Plugins</code>-<code>obsidian-leaflet-plugin</code>，打开里面的<code>main.js</code>，全局搜索<code>maxzoom:10</code>，全部修改为<code>maxzoom:18</code></p>
<p>然后保存，软件重启</p>
<p>最后我们输入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```leaflet</span></span><br><span class="line"><span class="code">id: TT20220430</span></span><br><span class="line"><span class="code">osmLayer: false</span></span><br><span class="line"><span class="code">tileServer: http://&#123;s&#125;.tile.osm.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</span></span><br><span class="line"><span class="code">tileSubdomains: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="code">lat: 30.2495</span></span><br><span class="line"><span class="code">long: 120.1436</span></span><br><span class="line"><span class="code">height: 800px</span></span><br><span class="line"><span class="code">width: 100%</span></span><br><span class="line"><span class="code">defaultZoom: 14</span></span><br><span class="line"><span class="code">maxzoom: 18</span></span><br><span class="line"><span class="code">minzoom: 1</span></span><br><span class="line"><span class="code">unit: meters</span></span><br><span class="line"><span class="code">scale: 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示效果如下</p>
<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/140550511259887.png"></p>
<h3 id="2-3-添加标记点"><a href="#2-3-添加标记点" class="headerlink" title="2.3 添加标记点"></a>2.3 添加标记点</h3><h4 id="最快捷的方式"><a href="#最快捷的方式" class="headerlink" title="最快捷的方式"></a>最快捷的方式</h4><p>找到要标记的点，鼠标右键，就打上了一个标记点，<br>然后右键标记点，编辑标记，Description可以添加这个点的描述信息<br>右键标记点-<code>转换为代码块</code>，此时切回编辑模式，可以看见自动添加了这个</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">marker</span>: default,<span class="number">30</span>.<span class="number">258943640372824</span>,<span class="number">120</span>.<span class="number">13927459716798</span>,,,,</span><br></pre></td></tr></table></figure>
<p>此时再切回预览，发现标记点是不是不见了，别急，把上面的后面几个逗号去掉</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">marker</span>: default,<span class="number">30</span>.<span class="number">258943640372824</span>,<span class="number">120</span>.<span class="number">13927459716798</span></span><br></pre></td></tr></table></figure>
<p>再切回预览模式，点又回来了</p>
<p>我们可以看下github仓库里给我们的说明</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">marker: <span class="attribute">&lt;type*&gt;</span>,<span class="attribute">&lt;latitude&gt;</span>,<span class="attribute">&lt;longitude&gt;</span>,<span class="attribute">&lt;link*&gt;</span>,<span class="attribute">&lt;description*&gt;</span>,<span class="attribute">&lt;minZoom*&gt;</span>,<span class="attribute">&lt;maxZoom*&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一个type是点的类型，这里default即可<br>第二个第三个是经纬度<br>第四个是文件链接，这里我们可以链接照片也可以链接文件，<br>第五个是description，是描述<br>第六第七个是是可以看见标记点的一个缩放大小区间</p>
<p>没有需求，后面可以不填<br>这里我们可以简单的绑定一个图片和添加描述信息</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">marker</span>: default,<span class="number">30</span>.<span class="number">258943640372824</span>,<span class="number">120</span>.<span class="number">13927459716798</span>,[[index.jpg]],<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/129052011257491.png"></p>
<h4 id="文件-yaml创建标记点"><a href="#文件-yaml创建标记点" class="headerlink" title="文件+yaml创建标记点"></a>文件+yaml创建标记点</h4><p>我们可以创建一个文件夹，然后在地图的 <code>markerFolder</code>把这个路径添加进去，例如</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```leaflet</span></span><br><span class="line"><span class="code">id: TT20220521</span></span><br><span class="line"><span class="code">osmLayer: false</span></span><br><span class="line"><span class="code">tileServer: http://&#123;s&#125;.tile.osm.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</span></span><br><span class="line"><span class="code">tileSubdomains: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="code">lat: 30.2574</span></span><br><span class="line"><span class="code">long: 120.1429</span></span><br><span class="line"><span class="code">height: 800px</span></span><br><span class="line"><span class="code">width: 100%</span></span><br><span class="line"><span class="code">defaultZoom: 16</span></span><br><span class="line"><span class="code">maxzoom: 18</span></span><br><span class="line"><span class="code">minzoom: 1</span></span><br><span class="line"><span class="code">unit: meters</span></span><br><span class="line"><span class="code">scale: 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">markerFolder: 100_Schedule/130_计划清单/133_旅游计划/旅游记录/2022/2022年5月西湖一日游/标记点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>然后在该文件夹里添加标记点文件</p>
<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/322732211254993.png"></p>
<p>我是通过经度+纬度的方式命名的，你也可以有其他命名方式</p>
<p>里面的yaml格式可以按照这样</p>
<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/15213811247356.png"></p>
<p>最关键的就是<code>mapmarker</code>和<code>location</code>字段，其他字段可以自己定义</p>
<ul>
<li><code>mapmarker</code>：标记点类型，默认为default</li>
<li><code>location</code>：经纬度信息</li>
</ul>
<p>因为这些信息都可以从照片中获取，所以我们可以写一个脚本来获取信息(这里形式不一，各位可以自行设计)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image = <span class="string">&#x27;IMG_20230430_203010.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">imageurl = <span class="string">&#x27;![](自己的照片路径/&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;照片路径\\&#x27;</span>+image, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tags = exifread.process_file(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印照片其中一些信息</span></span><br><span class="line"><span class="comment"># print(&#x27;拍摄时间：&#x27;, tags[&#x27;EXIF DateTimeOriginal&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照相机制造商：&#x27;, tags[&#x27;Image Make&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照相机型号：&#x27;, tags[&#x27;Image Model&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照片尺寸：&#x27;, tags[&#x27;EXIF ExifImageWidth&#x27;], tags[&#x27;EXIF ExifImageLength&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mapmarker: default&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;date: &quot;</span>,tags[<span class="string">&#x27;EXIF DateTimeOriginal&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;device: &quot;</span>+ <span class="built_in">str</span>(tags[<span class="string">&#x27;Image Make&#x27;</span>])+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(tags[<span class="string">&#x27;Image Model&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;place: &quot;</span>)</span><br><span class="line"><span class="comment">#获取经度或纬度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLatOrLng</span>(<span class="params">refKey, tudeKey</span>):</span><br><span class="line">    <span class="keyword">if</span> refKey <span class="keyword">not</span> <span class="keyword">in</span> tags:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    ref=tags[refKey].printable</span><br><span class="line">    LatOrLng=tags[tudeKey].printable[<span class="number">1</span>:-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;,&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    LatOrLng=<span class="built_in">float</span>(LatOrLng[<span class="number">0</span>])+<span class="built_in">float</span>(LatOrLng[<span class="number">1</span>])/<span class="number">60</span>+<span class="built_in">float</span>(LatOrLng[<span class="number">2</span>])/<span class="built_in">float</span>(LatOrLng[<span class="number">3</span>])/<span class="number">3600</span></span><br><span class="line">    <span class="keyword">if</span> refKey == <span class="string">&#x27;GPS GPSLatitudeRef&#x27;</span> <span class="keyword">and</span> tags[refKey].printable != <span class="string">&quot;N&quot;</span>:</span><br><span class="line">        LatOrLng=LatOrLng*(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> refKey == <span class="string">&#x27;GPS GPSLongitudeRef&#x27;</span> <span class="keyword">and</span> tags[refKey].printable != <span class="string">&quot;E&quot;</span>:</span><br><span class="line">        LatOrLng=LatOrLng*(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> LatOrLng</span><br><span class="line"> </span><br><span class="line">lat = getLatOrLng(<span class="string">&#x27;GPS GPSLatitudeRef&#x27;</span>,<span class="string">&#x27;GPS GPSLatitude&#x27;</span>) <span class="comment">#纬度</span></span><br><span class="line">lng = getLatOrLng(<span class="string">&#x27;GPS GPSLongitudeRef&#x27;</span>,<span class="string">&#x27;GPS GPSLongitude&#x27;</span>) <span class="comment">#经度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gps: [&#123;&#125;,&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(lat, lng))</span><br><span class="line"><span class="keyword">if</span> lat==<span class="literal">None</span> <span class="keyword">or</span> lng==<span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no gps&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;location: [&#123;&#125;,&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(lat, lng)) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(imageurl+image+<span class="string">&#x27;)&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终将打印出来的信息，填到文件里</p>
<h3 id="2-4-使用国内地图"><a href="#2-4-使用国内地图" class="headerlink" title="2.4 使用国内地图"></a>2.4 使用国内地图</h3><p>有些景点，openstreetmap的信息不是很多，所以我们被迫不得不用国内的地图</p>
<p>首先，将国外的服务器改为国内的高德</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">```leaflet</span></span><br><span class="line"><span class="code">id: TT20220430</span></span><br><span class="line"><span class="code">osmLayer: false</span></span><br><span class="line"><span class="code">tileServer: http://webrd0&#123;s&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;</span></span><br><span class="line"><span class="code">tileSubdomains: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span></span><br><span class="line"><span class="code">lat: 32.101</span></span><br><span class="line"><span class="code">long: 120.825</span></span><br><span class="line"><span class="code">height: 800px</span></span><br><span class="line"><span class="code">width: 100%</span></span><br><span class="line"><span class="code">defaultZoom: 16</span></span><br><span class="line"><span class="code">maxzoom: 18</span></span><br><span class="line"><span class="code">minzoom: 1</span></span><br><span class="line"><span class="code">unit: meters</span></span><br><span class="line"><span class="code">scale: 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>修改<code>tileServer</code>为<code>http://webrd0&#123;s&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;</code><br><code>tileSubdomains</code>修改为<code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</code></p>
<p>但是国内的地图的坐标信息是采用的和国际不一样的坐标体系，所以国外的GPS坐标，用在国内的地图上就会发生偏移，下面我们就来解决这个问题<br>具体原因见：<a href="https://zhuanlan.zhihu.com/p/258883313">https://zhuanlan.zhihu.com/p/258883313</a><br>这是如果尝试添加之前的坐标点，就会发现地图上地点对不上，而之前的openstreetmap则没有偏移，为了解决这个问题，我们调用高德的坐标转换API<br><a href="https://developer.amap.com/api/webservice/guide/api/convert">https://developer.amap.com/api/webservice/guide/api/convert</a><br>申请一个KEY</p>
<p>然后修改之前的脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 高德地图坐标转换</span></span><br><span class="line">gaodeconvert_enable = <span class="number">1</span></span><br><span class="line"><span class="comment"># 高德API的key</span></span><br><span class="line">gaodeapi_key = <span class="string">&quot;自己的key&quot;</span></span><br><span class="line"><span class="comment"># 高德api的网址</span></span><br><span class="line">gaodeapi_sitehead = <span class="string">&quot;https://restapi.amap.com/v3/assistant/coordinate/convert?locations=&quot;</span></span><br><span class="line"></span><br><span class="line">image = <span class="string">&#x27;IMG_20230430_203010.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">imageurl = <span class="string">&#x27;![](自己的图片路径/&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;图片路径\\&#x27;</span>+image, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tags = exifread.process_file(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印照片其中一些信息</span></span><br><span class="line"><span class="comment"># print(&#x27;拍摄时间：&#x27;, tags[&#x27;EXIF DateTimeOriginal&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照相机制造商：&#x27;, tags[&#x27;Image Make&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照相机型号：&#x27;, tags[&#x27;Image Model&#x27;])</span></span><br><span class="line"><span class="comment"># print(&#x27;照片尺寸：&#x27;, tags[&#x27;EXIF ExifImageWidth&#x27;], tags[&#x27;EXIF ExifImageLength&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mapmarker: default&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;date: &quot;</span>,tags[<span class="string">&#x27;EXIF DateTimeOriginal&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;device: &quot;</span>+ <span class="built_in">str</span>(tags[<span class="string">&#x27;Image Make&#x27;</span>])+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(tags[<span class="string">&#x27;Image Model&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;place: &quot;</span>)</span><br><span class="line"><span class="comment">#获取经度或纬度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLatOrLng</span>(<span class="params">refKey, tudeKey</span>):</span><br><span class="line">    <span class="keyword">if</span> refKey <span class="keyword">not</span> <span class="keyword">in</span> tags:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    ref=tags[refKey].printable</span><br><span class="line">    LatOrLng=tags[tudeKey].printable[<span class="number">1</span>:-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;,&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    LatOrLng=<span class="built_in">float</span>(LatOrLng[<span class="number">0</span>])+<span class="built_in">float</span>(LatOrLng[<span class="number">1</span>])/<span class="number">60</span>+<span class="built_in">float</span>(LatOrLng[<span class="number">2</span>])/<span class="built_in">float</span>(LatOrLng[<span class="number">3</span>])/<span class="number">3600</span></span><br><span class="line">    <span class="keyword">if</span> refKey == <span class="string">&#x27;GPS GPSLatitudeRef&#x27;</span> <span class="keyword">and</span> tags[refKey].printable != <span class="string">&quot;N&quot;</span>:</span><br><span class="line">        LatOrLng=LatOrLng*(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> refKey == <span class="string">&#x27;GPS GPSLongitudeRef&#x27;</span> <span class="keyword">and</span> tags[refKey].printable != <span class="string">&quot;E&quot;</span>:</span><br><span class="line">        LatOrLng=LatOrLng*(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> LatOrLng</span><br><span class="line"> </span><br><span class="line">lat = getLatOrLng(<span class="string">&#x27;GPS GPSLatitudeRef&#x27;</span>,<span class="string">&#x27;GPS GPSLatitude&#x27;</span>) <span class="comment">#纬度</span></span><br><span class="line">lng = getLatOrLng(<span class="string">&#x27;GPS GPSLongitudeRef&#x27;</span>,<span class="string">&#x27;GPS GPSLongitude&#x27;</span>) <span class="comment">#经度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gps: [&#123;&#125;,&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(lat, lng))</span><br><span class="line"><span class="keyword">if</span> lat==<span class="literal">None</span> <span class="keyword">or</span> lng==<span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no gps&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">gaodeapi_site = gaodeapi_sitehead + <span class="built_in">str</span>(lng)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(lat)+<span class="string">&quot;&amp;coordsys=gps&amp;output=json&amp;key=&quot;</span>+gaodeapi_key</span><br><span class="line">response = requests.get(gaodeapi_site)</span><br><span class="line">locations = response.json()[<span class="string">&#x27;locations&#x27;</span>]</span><br><span class="line">locations_list = locations.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">gn=locations_list[<span class="number">1</span>]+<span class="string">&#x27;,&#x27;</span>+locations_list[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gn: [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(gn)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gaodeconvert_enable == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;location: [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(gn)) </span><br><span class="line">    <span class="comment">#response = requests.get(gaodeapi_site+&quot;locations=&quot;+lng+&quot;,&quot;+lat+&quot;&amp;coordsys=gps&amp;output=json&amp;key=&quot;+gaodeapi_key)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;location: [&#123;&#125;,&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(lat, lng)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(imageurl+image+<span class="string">&#x27;)&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gaodeconvert_enable == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(gn) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lat, lng)) </span><br></pre></td></tr></table></figure>

<p>最终生成出转换后的坐标</p>
<p><img src="https://alistsa.vip.cpolar.cn/d/public/pic/vx_images/540910012240490.png"></p>
<h3 id="2-5-路径"><a href="#2-5-路径" class="headerlink" title="2.5 路径"></a>2.5 路径</h3><p>配合右下角的一些编辑工具，可以实现整个旅行路径的绘制，还是蛮有意思的。</p>
<h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3 最后"></a>3 最后</h2><p>因为这个插件在网上资料不是很多，故想写一个推文去普及一下这个插件的使用，文中还有不详细的地方以及不是很完美的地方还请见谅，后面我会继续完善这个文章。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li>插件github：<a href="https://github.com/javalent/obsidian-leaflet">https://github.com/javalent/obsidian-leaflet</a></li>
<li>openstreetmap官网：<a href="https://www.openstreetmap.org/#map">https://www.openstreetmap.org/#map</a></li>
<li>leaflet中如何优雅的解决百度、高德地图的偏移问题：<a href="https://zhuanlan.zhihu.com/p/258883313">https://zhuanlan.zhihu.com/p/258883313</a></li>
<li>照片位置信息提取（获取经纬度）：<a href="https://blog.csdn.net/weixin_47325163/article/details/119037394">https://blog.csdn.net/weixin_47325163/article/details/119037394</a></li>
<li>告别十年印象笔记，用 Obsidian 一年最喜欢的 7 个功能：<a href="https://sspai.com/post/77852">https://sspai.com/post/77852</a></li>
<li>leaflet之添加各种地图的服务：<a href="https://blog.csdn.net/gexin0517/article/details/103769193">https://blog.csdn.net/gexin0517/article/details/103769193</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>黑马教程金融类安全传输平台项目部署</title>
    <url>/2023/08/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/article1/</url>
    <content><![CDATA[<blockquote>
<p>看完这个教程之后<a href="https://www.bilibili.com/video/BV1fg411j7SF/">金融类安全传输平台项目（C&#x2F;C++阶段五）</a>，看见评论区有个兄弟分享了源码，<a href="https://github.com/Peachol/Secure_data_transmission">https://github.com/Peachol/Secure_data_transmission</a><br>于是我就clone下来尝试跑一下，结果发现事情并没有那么简单，花了一下午才把项目跑起来，然后目前还有报错，但是已经能让客户端和服务端通信了，故记录一下环境搭建的过程。</p>
</blockquote>
<h2 id="Clone源码和补充Makefile脚本"><a href="#Clone源码和补充Makefile脚本" class="headerlink" title="Clone源码和补充Makefile脚本"></a>Clone源码和补充Makefile脚本</h2><p>上面clone下来的源码，有两个文件夹，<code>server</code>和<code>client</code>，其中<code>client</code>写了Makefile，server里面没写，那我们就补充一个Makefile，把client的复制下来稍微改一改</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">src=<span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">objs=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(src)</span>)</span></span><br><span class="line"></span><br><span class="line">target=serverMain</span><br><span class="line">LIBS=-lstdc++ -pthread -lssl -lcrypto -locci -lclntsh</span><br><span class="line">DEFINE=-D_GLIBCXX_USE_CXX11_ABI=0</span><br><span class="line"></span><br><span class="line"><span class="variable">$(target)</span>:<span class="variable">$(objs)</span></span><br><span class="line">	g++ -o <span class="variable">$@</span> <span class="variable">$^</span> <span class="variable">$(LIBS)</span>  <span class="variable">$(DEFINE)</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.cpp</span></span><br><span class="line">	g++ -std=c++11 -c <span class="variable">$&lt;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f <span class="variable">$(target)</span> <span class="variable">$(objs)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>尝试make，有报错，别急，一点一点配置环境。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端的环境配置比较简单，就是需要一个openssl的库</p>
<h3 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h3><p>打开网址 <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a></p>
<p>下载1版本：<code>openssl-1.1.1v.tar.gz</code></p>
<p>拷贝到linux里，然后解压<code>tar -xzvf</code></p>
<p>然后执行<code>./config</code></p>
<p>编译<code>make -j4</code></p>
<p>安装<code>make install</code></p>
<p>测试<code>openssl version -a</code></p>
<p>如果报错</p>
<p>搜索动态库路径<code>find / -name libcrypto.so</code></p>
<p>然后将搜索到的路径放到<code>/etc/ld.so.conf</code>里：<code>vim /etc/ld.so.conf</code><br>然后生效：<code>sudo ldconfig</code></p>
<p>再次测试：<code>openssl version -a</code></p>
<p>通过，此时就可以编译客户端的程序了</p>
<p>over</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端主要繁琐在数据库的配置，如果没有配置过数据库，那真是要死要活，这里我原本打算直接在linux里安装oracle，但是搜了一下安装过程，简直要命，然后我就想到了docker。</p>
<h3 id="docker安装oracle"><a href="#docker安装oracle" class="headerlink" title="docker安装oracle"></a>docker安装oracle</h3><p>docker安装oracle我是参考的这两个教程：<br><a href="https://blog.csdn.net/momo1938/article/details/100514093">https://blog.csdn.net/momo1938/article/details/100514093</a><br><a href="https://blog.csdn.net/m0_57179014/article/details/120182269">https://blog.csdn.net/m0_57179014/article/details/120182269</a><br>但并不能解决100%的问题。</p>
<ul>
<li>安装docker和启动docker</li>
</ul>
<p><code>sudo apt install docker.io</code><br><code>systemctl start docker</code></p>
<p>加入开机自启：<code>systemctl enable docker</code></p>
<ul>
<li>安装oracle11g</li>
</ul>
<p><code>sudo docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></p>
<p><code>&gt; sudo docker run -d -p 1521:1521 --name oracle registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></p>
<p>启动容器<code>sudo docker start oracle</code></p>
<p>进入容器镜像<code>sudo docker exec -it oracle bash</code></p>
<ul>
<li>配置环境变量</li>
</ul>
<p>切换root权限：<code>su root</code></p>
<blockquote>
<p>密码是：<code>helowin</code></p>
</blockquote>
<p>这里默认进去是<code>oracle</code>的用户，这个用户的密码我不知道，我是通过<code>root</code>用户去修改用户的密码的<code>passwd oracle</code></p>
<p><code>vi /etc/profile</code></p>
<p>下面的SID这个不能错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin </span><br><span class="line">export PATH=$ORACLEHOME/bin:PATH</span><br></pre></td></tr></table></figure>
<p>保存<code>wq!</code>后执行<code>source /etc/profile</code></p>
<p>切回<code>oracle</code>：<code>su - oracle</code></p>
<ul>
<li>进入数据库，创建用户，修改配置</li>
</ul>
<p><code>sqlplus / as sysdba</code></p>
<p><code> create user SECMNG identified by SECMNG;</code> 创建内部管理员账号密码；<br><code> grant resource,connect,dba to SECMNG;</code> 将dba权限授权给内部管理员账号和密码；<br><code>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</code> 设置密码永不过期：<br><code>alter system set processes=1000 scope=spfile;</code> 修改数据库最大连接数据；</p>
<p>修改后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn /as sysdba;--保存数据库</span><br><span class="line">shutdown immediate; --关闭数据库</span><br><span class="line">startup; --启动数据库</span><br><span class="line">show user;</span><br></pre></td></tr></table></figure>

<h3 id="配置数据库客户端"><a href="#配置数据库客户端" class="headerlink" title="配置数据库客户端"></a>配置数据库客户端</h3><p>如上，数据库服务器我们已经安装和配置好了，接下来就是要配置一下服务器的客户端</p>
<p>那么我们这个工程的服务端其实就是作为数据库的客户端(很绕)，所以我们需要配置一下这个客户端的环境</p>
<p>我们要用到的就是这个<code>Oracle Instant Client</code></p>
<p>从官网中(要注册才能下载)<br><a href="https://www.oracle.com/cn/database/technologies/instant-client/linux-x86-64-downloads.html">https://www.oracle.com/cn/database/technologies/instant-client/linux-x86-64-downloads.html</a></p>
<p>下载三个文件<br><code>instantclient-basic-linux.x64-11.2.0.4.0.zip</code><br><code>instantclient-sdk-linux.x64-11.2.0.4.0.zip</code><br><code>instantclient-sqlplus-linux.x64-11.2.0.4.0.zip</code></p>
<p>拷贝到opt目录底下(决定了下面环境变量的配置目录)</p>
<p>做两个软连接</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ln</span> -s libclntsh.<span class="keyword">so</span>.<span class="number">11.1</span> libclntsh.<span class="keyword">so</span></span><br><span class="line"><span class="keyword">ln</span> -s libocci.<span class="keyword">so</span>.<span class="number">11.1</span> libocci.<span class="keyword">so</span></span><br></pre></td></tr></table></figure>
<p>在根目录下新建两级文件夹<code>/network/admin</code><br>创建文件<code>tnsnames.ora</code></p>
<p>写入</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">helowin</span> <span class="operator">=</span></span><br><span class="line">(DESCRIPTION <span class="operator">=</span></span><br><span class="line"> (ADDRESS <span class="operator">=</span> (PROTOCOL <span class="operator">=</span> TCP)(HOST <span class="operator">=</span> <span class="number">127.0</span>.<span class="number">0.1</span>)(PORT <span class="operator">=</span> <span class="number">1521</span>))</span><br><span class="line"> (CONNECT_DATA <span class="operator">=</span></span><br><span class="line">  (SERVER <span class="operator">=</span> DEDICATED)</span><br><span class="line">  (SERVICE_NAME <span class="operator">=</span> orcl)</span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置：<code>sudo vim /etc/profile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ORACLE_SID=helowin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OCCI_HOME</span></span><br><span class="line">export OCCI_HOME=/opt/instantclient_11_2</span><br><span class="line">export OCCI_INCLUDE_DIR=$OCCI_HOME/sdk/include</span><br><span class="line">export OCCI_LIBRARY_PATH=$OCCI_HOME</span><br><span class="line">export LD_LIBRARY_PATH=$OCCI_HOME:$OCCI_LIBRARY_PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序编译时搜索的库目录</span></span><br><span class="line">export LIBRARY_PATH=$LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序编译时搜索的头文件目录</span></span><br><span class="line">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$OCCI_INCLUDE_DIR</span><br><span class="line">export PATH=$OCCI_HOME:$PATH</span><br><span class="line">export TNS_ADMIN=$OCCI_HOME/network/admin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>生效：<code>source /etc/profile</code></p>
<p>验证：执行<code>sqlplus</code></p>
<p>报错：缺少<code>libaio.so</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus: error while loading sharedlibraries: libaio.so.1: cannot open shared object file: No such file ordirectory</span><br></pre></td></tr></table></figure>

<p>安装：<code>sudo apt-get install libaio*</code></p>
<p>再次验证<code>sqlplus</code></p>
<p>跳出登录界面即成功？只成功了一半。。。接下来才是噩梦的开始</p>
<p>上面跟着做基本上能规避掉一些问题，我再强调一下有哪些点</p>
<p>第一：配置环境变量的时候<code>export ORACLE_SID=helowin</code>这个双方不能少，docker里和本机里都要配置<br>第二：本机里的<code>tnsnames.ora</code>第一行是实例名，这个不能瞎写，我们这里是<code>helowin</code><br>如何查询：通过docker进入到数据库<code>sqlplus / as sysdba</code>，输入<code>select instance_name from v$instance;</code>可以查到，这里要一致</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">INSTANCE_NAME</span></span><br><span class="line"><span class="section">----------------</span></span><br><span class="line">helowin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三：上面两个软连接不要忘了，不然make编译时就会报错各种undefine </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s libclntsh.so.11.1 libclntsh.so</span><br><span class="line">ln -s libocci.so.11.1 libocci.so</span><br></pre></td></tr></table></figure>



<p>最后一个就是终极问题了，上面的做完之后，应该可以make，然后执行之后，会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORA-24960: the attribute  OCI_ATTR_USERNAME is greater than the maximum allowable length of 255</span><br></pre></td></tr></table></figure>

<p>最后查到了这两篇文章<br><a href="https://www.coder.work/article/7822497">https://www.coder.work/article/7822497</a><br><a href="https://stackoverflow.com/questions/42890553/ubuntu-ora-24960-the-attribute-oci-attr-username-is-greater-than-the-maximum-al">https://stackoverflow.com/questions/42890553/ubuntu-ora-24960-the-attribute-oci-attr-username-is-greater-than-the-maximum-al</a></p>
<p>因为occi需要g++版本低于4.8，然后我尝试了获取4.8版本的g++，但是包管理说找不到(shit！我还FQ更新了一下<code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test</code>，还是找不到)<br>然后最终我在stackflow里看到了这句，<code>Also help to use -D_GLIBCXX_USE_CXX11_ABI=0 flag.</code>（stackflow yyds）</p>
<p>然后加进了<code>makefile</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DEFINE=-D_GLIBCXX_USE_CXX11_ABI=0</span><br></pre></td></tr></table></figure>
<p>至此，基本上就能跑通了。</p>
<p>完结</p>
<blockquote>
<p>上面的记述可能有点混乱，没办法，这是我跑通之后回忆的，前后可能会比较乱，望谅解，如果碰到问题，可以试着从我上面总结的几个问题中找找解决方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>MCU</tag>
      </tags>
  </entry>
</search>
